// EECS 348 Assignment 7
// Author: Aiman Boullaouz
// Description: Connects to SQL database then runs queries and outputs results
// Inputs: Needs prebuilt SQL tables to search
// Output: SQL query results printed to console
// Created: 4/24/2025
// Collaborators: Code generated by ChatGPT, queries debugged and code anottated by author

// Include necessary libraries for input/output, exceptions, and MySQL connectivity
#include <iostream>       
#include <stdexcept>  
#include <mysql_driver.h> 
#include <mysql_connection.h> 
#include <cppconn/statement.h> 
#include <cppconn/prepared_statement.h> 
#include <cppconn/resultset.h> 
#include <cppconn/exception.h> 

using namespace std; // Use standard namespace for console I/O
using namespace sql; // Use MySQL connector namespace

// Function to execute and display results of a SQL query
void runQuery(Statement* stmt, const string& query) {
    try {
        ResultSet* res = stmt->executeQuery(query);     // Execute the SQL query and get result set
        
        ResultSetMetaData* meta = res->getMetaData();   // Get metadata about the result (column names/types)
        
        int columns = meta->getColumnCount();           // Get number of columns in the result
        
        // While there are results loop through each row
        while (res->next()) {
            // Loop through each column in current row
            for (int i = 1; i <= columns; ++i)
                cout << meta->getColumnLabel(i) << ": " << res->getString(i) << "\t";   // Print column name and value separated by tab
            cout << endl; // New line after each row
        }
        delete res; // delete the result when finished
    } catch (SQLException &e) {
        cerr << "Query failed: " << e.what() << endl;   // Handles SQL errors during query execution
    }
}

int main() {
    try {
        mysql::MySQL_Driver* driver = mysql::get_mysql_driver_instance();   // storing the sql driver instance
        
        // Connecting to the SQL server
        Connection* con = driver->connect("tcp://mysql.eecs.ku.edu", "348s25_a734b348", "thoz9Joo");
        
        con->setSchema("348s25_a734b348");  // Selecting which database to use

        // Creating a statement for executing the queries
        Statement* stmt = con->createStatement();

        // Execute and display results for the 12 queries/operations in the writeup

        // Query 1: Show Information Systems (IS) majors
        cout << "1. Students majoring in IS:\n";
        runQuery(stmt, "SELECT * FROM Student WHERE StdMajor = 'IS'");

        // Query 2: Students in more than 2 courses
        cout << "\n2. Students enrolled in more than 2 courses:\n";
        runQuery(stmt, "SELECT StdNo FROM Enrollment GROUP BY StdNo HAVING COUNT(*) > 2");

        // Query 3: Physics professors with > 5 years experience
        cout << "\n3. Professors in Physics with > 5 years:\n";
        runQuery(stmt, "SELECT * FROM Faculty WHERE FacDept = 'Physics' AND TIMESTAMPDIFF(YEAR, FacHireDate, CURDATE()) > 5");

        // Query 4: Departments with over 50 students
        cout << "\n4. Departments with more than 50 students:\n";
        runQuery(stmt, "SELECT StdMajor, COUNT(*) AS Total FROM Student GROUP BY StdMajor HAVING COUNT(*) > 50");

        // Query 5: Data courses taught by Dr. Johnson
        cout << "\n5. Data courses taught by Dr. Johnson:\n";
        runQuery(stmt, "SELECT Course.CourseNo, Course.CrsDesc FROM Course JOIN Offering ON Course.CourseNo = Offering.CourseNo JOIN Faculty ON Offering.FacNo = Faculty.FacNo WHERE Course.CrsDesc LIKE '%Data%' AND FacFirstName = 'Dr.' AND FacLastName = 'Johnson'");

        // Query 6: Students inactive in recent semesters
        cout << "\n6. Students not enrolled in past two semesters:\n";
        runQuery(stmt, "SELECT * FROM Student WHERE StdNo NOT IN (SELECT DISTINCT StdNo FROM Enrollment JOIN Offering ON Enrollment.OfferNo = Offering.OfferNo WHERE (OffTerm = 'Fall' AND OffYear = 2024) OR (OffTerm = 'Spring' AND OffYear = 2025))");

        // Query 7: Find second-highest GPA
        cout << "\n7. Second highest GPA:\n";
        runQuery(stmt, "SELECT MAX(StdGPA) AS SecondHighest FROM Student WHERE StdGPA < (SELECT MAX(StdGPA) FROM Student)");

        // Query 8: High GPA students who are Teaching Assistants
        cout << "\n8. Students who are TAs with GPA > 3.5:\n";
        runQuery(stmt, "SELECT * FROM Student WHERE StdNo IN (SELECT FacNo FROM Offering) AND StdGPA > 3.5");

        // Query 9: Student enrollments after 2022
        cout << "\n9. Students and courses (after 2022):\n";
        runQuery(stmt, "SELECT Student.StdFirstName, Student.StdLastName, Course.CourseNo FROM Student JOIN Enrollment ON Student.StdNo = Enrollment.StdNo JOIN Offering ON Enrollment.OfferNo = Offering.OfferNo JOIN Course ON Offering.CourseNo = Course.CourseNo WHERE OffYear > 2022");

        // Query 10: Top 3 highest-paid professors
        cout << "\n10. Top 3 highest paid professors:\n";
        runQuery(stmt, "SELECT FacFirstName, FacLastName, FacSalary FROM Faculty ORDER BY FacSalary DESC LIMIT 3");

        // Query 11: Insert new student record
        cout << "\n11. Insert Alice Smith:\n";
        stmt->execute("INSERT INTO Student (StdNo, StdFirstName, StdLastName, StdCity, StdState, StdZip, StdMajor, StdClass, StdGPA) VALUES ('888-88-8888', 'Alice', 'Smith', 'Topeka', 'KS', '66610', 'CS', 'Junior', 3.85)");
        // Verify insertion
        runQuery(stmt, "SELECT * FROM Student WHERE StdNo = '888-88-8888'");

        // Query 12: Update existing student record
        cout << "\n12. Update Bob Norbert city/zip:\n";
        stmt->execute("UPDATE Student SET StdCity = 'Overland Park', StdZip = '66210' WHERE StdFirstName = 'Bob' AND StdLastName = 'Norbert'");
        // Verify update
        runQuery(stmt, "SELECT * FROM Student WHERE StdFirstName = 'Bob' AND StdLastName = 'Norbert'");

        // Cleaning the objects created earlier in the program
        delete stmt; // Delete statement object
        delete con;  // Close database connection

    } catch (SQLException &e) {
        // Handle any database connection errors
        cerr << "MySQL error: " << e.what() << endl;
    }
    return 0; // Exit program
}
